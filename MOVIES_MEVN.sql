use mavenmovies;

select count(*)
from rental;

select count(*)
from inventory;

select count(*)
from FILM;

select count(*)
from COSTOMER;

select sum(AMOUNT)
FROM PAYMENT;

--PROVIDE REVENUE TREND FOR INVESTOR

select X.YEAR,X.MONTH_NAME,sum(AMOUNT)AS REVENUE
FROM(select *,extract(YEAR FROM PAYMENT_DATE)AS YEAR,date_format(PAYMENT_DATE,"%B")AS MONTH_NAME
FROM PAYMENT)AS X
group by X.YEAR,X.MONTH_NAME;

__PROVIDE A LIST OF TOP 10 CUSTOMER BEASD ON REVENUE TO PUSH OFFER TO THEM

SELECT X.CUSTOMER_ID
FROM(SELECT CUSTOMER_ID,SUM(AMOUNT)AS REVENUE_FROM_CUSTOMER
FROM PAYMENT 
GROUP BY CUSTOMER_ID
ORDER BY REVENUE_FROM_CUSTOMER DESC
LIMIT 10)AS X ;



SELECT *
FROM CUSTOMER
where CUSTOMER_ID in(SELECT X.CUSTOMER_ID
FROM(SELECT CUSTOMER_ID,SUM(AMOUNT)AS REVENUE_FROM_CUSTOMER
FROM PAYMENT 
GROUP BY CUSTOMER_ID
ORDER BY REVENUE_FROM_CUSTOMER DESC
LIMIT 10)AS X );

-- DATA ANALYSIS PROJECT FOR RENTAL MOVIES BUSINESS
-- THE STEPS INVOLVED ARE EDA, UNDERSTANDING THR SCHEMA AND ANSWERING THE AD-HOC QUESTIONS
-- BUSINESS QUESTIONS LIKE EXPANDING MOVIES COLLECTION AND FETCHING EMAIL IDS FOR MARKETING ARE INCLUDED
-- HELPING COMPANY KEEP A TRACK OF INVENTORY AND HELP MANAGE IT.

-- You need to provide customer firstname, lastname and email id to the marketing team --

select FIRST_NAME,LAST_NAME,EMAIL
FROM CUSTOMER;

-- How many movies are with rental rate of $0.99? --

SELECT count(*)AS CHEAPEST_RENTALS
FROM FILM
WHERE RENTAL_RATE = 0.99;

-- We want to see rental rate and how many movies are in each rental category --

SELECT RENTAL_RATE,COUNT(*)
FROM FILM 
group by RENTAL_RATE;

-- Which rating has the most films? -

select RATTING,COUNT(*)AS NUMBER_OF_MOVIE
FROM FILM 
group by RATTING
order by NUMBER_OF_MOVIE desc
limit 1;

-- Which rating is most prevalant in each store? --
select INV.STORE_ID,F.RATING,COUNT(INV.INVENTORY_ID)AS NUMBER_OF_COPIES
FROM INVENTORY AS INV LEFT JOIN FILM AS F
ON INV .FILM_ID= F.FILM_ID
GROUP BY INV.STORE_ID,F.RATING
order by NUMBER_OF_COPIES DESC;

-- List of films by Film Name, Category, Language --
select F.FILM_ID,F.TITLE,C.NAME AS CATEGORY_NAME, LANG AS LANGUGE
FROM FILM AS F LEFT JION FILM_CATEGORY AS FC
ON F.FILM_ID = FC.FILM_ID LEFT JOIN CATEGORY AS C
ON FC.CATEGORY_ID = C.CATEGORY_ID LEFT JOIN LANGUAGE AS LUNG
ON F.LANGUAGE_ID = LANG.LANGUAGE_ID;

-- HOW MANY EACH MOVIE HAS BEEN RENTED OUT?
select F.TITLE,count(RENTAL_ID)AS NUMBER_OF_RENTALS
FROM RENTAL AS R LEFT JOIN INVENTORY AS INV
ON R.INVENTORY_ID = INV.INVENTORY_ID LEFT JOIN FILM AS F 
ON INV.FILM_ID = F.FILM_ID
GROUP BY F.TITLE
order by NUMBER_OF_RENTALS desc;

-- REVENUE PER FILM (TOP 10 GROSSRES)--
SELECT F.TITLE,SUM(P.AMOUNT) AS REVENUE_PER_FILM
FROM
    PAYMENT AS P
        LEFT JOIN
    RENTAL AS R ON P.RENTAL_ID = R.RENTAL_ID
        LEFT JOIN
    INVENTORY AS INV ON R.INVENTORY_ID = INV.INVENTORY_ID
        LEFT JOIN
    FILM AS F ON INV.FILM_ID = F.FILM_ID
group by F.TITLE
order by REVENUE_PER_FILM desc limit 10;

-- Which Store has historically brought the most revenue?
SELECT ST.STORE_ID,SUM(P.AMOUNT)AS REVENUE_PER_STORE
FROM PAYMENT AS P LEFT JOIN STAFF AS ST
ON P.STAFF_ID=ST.STAFF_ID
GROUP BY ST.STORE_ID;

-- Reward users who have rented at least 30 times (with details of customers)
SELECT customer_id,count(rental_id)as number_of_rental
FROM RENTAL
group by customer_id
having number_of_rental >=30
order by customer_id;
